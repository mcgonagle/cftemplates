AWSTemplateFormatVersion: "2010-09-09"
Description: "deploy an example workload into an existing kubernetes cluster"
Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
Parameters:
  KubeClusterName:
    Type: String
Resources:
  KubeManifestNSSpinnaker:
    Type: "AWSQS::Kubernetes::Resource"
    Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
    Properties:
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: spinnaker
  KubeManifestSpinnakerSecrets:
    Type: "AWSQS::Kubernetes::Resource"
    Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
    Properties:
      ClusterName: !Ref KubeClusterName
      Namespace: "spinnaker"
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: v1
        data:
          aws-secret-key: eHh4
          aws-session-token: eHh4
          bitbucket-password: eHh4
          cf-password: eHh4
          clouddriver-keystore-password: Y2hhbmdlaXQ=
          datadog-apikey: eHh4
          datadog-appkey: eHh4
          dinghy-key-password: cGFzc3dvcmQ=
          echo-keystore-password: Y2hhbmdlaXQ=
          fiat-keystore-password: Y2hhbmdlaXQ=
          front50-keystore-password: Y2hhbmdlaXQ=
          gate-keystore-password: Y2hhbmdlaXQ=
          git-https-password: eHh4
          github-oauth-token: eHh4
          github-password: eHh4
          github-token: eHh4
          gitlab-token: eHh4
          googleOauthClientId: Y2hhbmdlbWU=
          googleOauthClientSecret: Y2hhbmdlbWU=
          grafanaDefaultPassword: YWRtaW4=
          grafanaDefaultUser: YWRtaW4=
          helm-token: eHh4
          http-password: eHh4
          igor-keystore-password: Y2hhbmdlaXQ=
          jenkins-token: eHh4
          kayenta-keystore-password: Y2hhbmdlaXQ=
          minioAccessKey: Y2hhbmdlbWU=
          mysqlCdMigratePassword: Y2hhbmdlbWU=
          mysqlCdPassword: Y2hhbmdlbWU=
          mysqlF50MigratePassword: Y2hhbmdlbWU=
          mysqlF50Password: Y2hhbmdlbWU=
          mysqlOrcaMigratePassword: Y2hhbmdlbWU=
          mysqlOrcaPassword: Y2hhbmdlbWU=
          mysqlRootPassword: Y2hhbmdlbWU=
          oauth-client-secret: eHh4
          orca-keystore-password: Y2hhbmdlaXQ=
          prometheus-password: eHh4
          redis-password: eHh4
          rosco-keystore-password: Y2hhbmdlaXQ=
          saml-keystore-pwd: eHh4
          secretfile-example: U2FtcGxlIHNlY3JldCBmaWxl
          slack-token: eHh4
          ssh-pk-passphrase: eHh4
          terraformer-key-password: cGFzc3dvcmQ=
          tlsKeyStorePassword: Y2hhbmdlbWU=
          twilio-token: eHh4
          vaultToken: eHh4
        kind: Secret
        metadata:
          creationTimestamp: null
          name: spin-secrets
          namespace: spinnaker
    DependsOn: "KubeManifestNSSpinnaker"
  KubeManifestSpinSA:
    Type: "AWSQS::Kubernetes::Resource"
    Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
    Properties:
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: spin-cluster-role
        rules:
        - apiGroups:
          - ""
          resources:
          - pods
          - ingresses/status
          - endpoints
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - services
          - services/finalizers
          - events
          - configmaps
          - secrets
          - namespaces
          - ingresses
          - jobs
          verbs:
          - create
          - get
          - list
          - update
          - watch
          - patch
          - delete
        - apiGroups:
          - batch
          resources:
          - jobs
          verbs:
          - create
          - get
          - list
          - update
          - watch
          - patch
        - apiGroups:
          - apps
          - extensions
          resources:
          - deployments
          - deployments/finalizers
          - deployments/scale
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - create
          - get
          - list
          - update
          - watch
          - patch
          - delete
        - apiGroups:
          - monitoring.coreos.com
          resources:
          - servicemonitors
          verbs:
          - get
          - create
        - apiGroups:
          - spinnaker.armory.io
          resources:
          - '*'
          - spinnakerservices
          verbs:
          - create
          - get
          - list
          - update
          - watch
          - patch
        - apiGroups:
          - admissionregistration.k8s.io
          resources:
          - validatingwebhookconfigurations
          verbs:
          - '*'
        ---
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: spin-sa
        ---
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
          name: spin-cluster-role-binding
        subjects:
          - kind: ServiceAccount
            name: spin-sa
            namespace: spinnaker
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: spin-cluster-role
    DependsOn: "KubeManifestSpinnakerSecrets"
  KubeManifestRedisSpinnaker:
    Type: "AWSQS::Kubernetes::Resource"
    Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
    Properties:
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          labels:
            app: redis
            cluster: redis
          name: redis
          namespace: spinnaker
        spec:
          progressDeadlineSeconds: 600
          replicas: 1
          revisionHistoryLimit: 10
          selector:
            matchLabels:
              app: redis
              cluster: redis
          template:
            metadata:
              labels:
                app: redis
                cluster: redis
            spec:
              containers:
              - env:
                - name: MASTER
                  value: "true"
                image: docker.io/redis:latest
                name: redis
                ports:
                - containerPort: 6379
                  protocol: TCP
                readinessProbe:
                  failureThreshold: 3
                  periodSeconds: 10
                  successThreshold: 1
                  tcpSocket:
                    port: 6379
                  timeoutSeconds: 1
              restartPolicy: Always
        ---
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            cluster: redis
          name: redis
          namespace: spinnaker
        spec:
          ports:
          - name: http
            port: 6379
            protocol: TCP
            targetPort: 6379
          selector:
            app: redis
            cluster: redis
          type: ClusterIP
    DependsOn: "KubeManifestSpinSA"
  KubeManifestNGINXIngress:
    Type: "AWSQS::Kubernetes::Resource"
    Metadata: { cfn-lint: { config: { ignore_checks: [E3002] } } }
    Properties:
      ClusterName: !Ref KubeClusterName
      # Kubernetes manifest
      Manifest: !Sub |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ingress-nginx
          labels:
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
        ---
        # Source: ingress-nginx/templates/controller-serviceaccount.yaml
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: controller
          name: ingress-nginx
          namespace: ingress-nginx
        ---
        # Source: ingress-nginx/templates/controller-configmap.yaml
        apiVersion: v1
        kind: ConfigMap
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: controller
          name: ingress-nginx-controller
          namespace: ingress-nginx
        data:
        ---
        # Source: ingress-nginx/templates/clusterrole.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
          name: ingress-nginx
        rules:
          - apiGroups:
              - ''
            resources:
              - configmaps
              - endpoints
              - nodes
              - pods
              - secrets
            verbs:
              - list
              - watch
          - apiGroups:
              - ''
            resources:
              - nodes
            verbs:
              - get
          - apiGroups:
              - ''
            resources:
              - services
            verbs:
              - get
              - list
              - watch
          - apiGroups:
              - extensions
              - networking.k8s.io   # k8s 1.14+
            resources:
              - ingresses
            verbs:
              - get
              - list
              - watch
          - apiGroups:
              - ''
            resources:
              - events
            verbs:
              - create
              - patch
          - apiGroups:
              - extensions
              - networking.k8s.io   # k8s 1.14+
            resources:
              - ingresses/status
            verbs:
              - update
          - apiGroups:
              - networking.k8s.io   # k8s 1.14+
            resources:
              - ingressclasses
            verbs:
              - get
              - list
              - watch
        ---
        # Source: ingress-nginx/templates/clusterrolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
          name: ingress-nginx
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ingress-nginx
        subjects:
          - kind: ServiceAccount
            name: ingress-nginx
            namespace: ingress-nginx
        ---
        # Source: ingress-nginx/templates/controller-role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: controller
          name: ingress-nginx
          namespace: ingress-nginx
        rules:
          - apiGroups:
              - ''
            resources:
              - namespaces
            verbs:
              - get
          - apiGroups:
              - ''
            resources:
              - configmaps
              - pods
              - secrets
              - endpoints
            verbs:
              - get
              - list
              - watch
          - apiGroups:
              - ''
            resources:
              - services
            verbs:
              - get
              - list
              - watch
          - apiGroups:
              - extensions
              - networking.k8s.io   # k8s 1.14+
            resources:
              - ingresses
            verbs:
              - get
              - list
              - watch
          - apiGroups:
              - extensions
              - networking.k8s.io   # k8s 1.14+
            resources:
              - ingresses/status
            verbs:
              - update
          - apiGroups:
              - networking.k8s.io   # k8s 1.14+
            resources:
              - ingressclasses
            verbs:
              - get
              - list
              - watch
          - apiGroups:
              - ''
            resources:
              - configmaps
            resourceNames:
              - ingress-controller-leader-nginx
            verbs:
              - get
              - update
          - apiGroups:
              - ''
            resources:
              - configmaps
            verbs:
              - create
          - apiGroups:
              - ''
            resources:
              - events
            verbs:
              - create
              - patch
        ---
        # Source: ingress-nginx/templates/controller-rolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: controller
          name: ingress-nginx
          namespace: ingress-nginx
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: ingress-nginx
        subjects:
          - kind: ServiceAccount
            name: ingress-nginx
            namespace: ingress-nginx
        ---
        # Source: ingress-nginx/templates/controller-service-webhook.yaml
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: controller
          name: ingress-nginx-controller-admission
          namespace: ingress-nginx
        spec:
          type: ClusterIP
          ports:
            - name: https-webhook
              port: 443
              targetPort: webhook
          selector:
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/component: controller
        ---
        # Source: ingress-nginx/templates/controller-service.yaml
        apiVersion: v1
        kind: Service
        metadata:
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
            service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
            service.beta.kubernetes.io/aws-load-balancer-type: nlb
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: controller
          name: ingress-nginx-controller
          namespace: ingress-nginx
        spec:
          type: LoadBalancer
          externalTrafficPolicy: Local
          ports:
            - name: http
              port: 80
              protocol: TCP
              targetPort: http
            - name: https
              port: 443
              protocol: TCP
              targetPort: https
          selector:
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/component: controller
        ---
        # Source: ingress-nginx/templates/controller-deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: controller
          name: ingress-nginx-controller
          namespace: ingress-nginx
        spec:
          selector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/instance: ingress-nginx
              app.kubernetes.io/component: controller
          revisionHistoryLimit: 10
          minReadySeconds: 0
          template:
            metadata:
              labels:
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/component: controller
            spec:
              dnsPolicy: ClusterFirst
              containers:
                - name: controller
                  image: k8s.gcr.io/ingress-nginx/controller:v0.44.0@sha256:3dd0fac48073beaca2d67a78c746c7593f9c575168a17139a9955a82c63c4b9a
                  imagePullPolicy: IfNotPresent
                  lifecycle:
                    preStop:
                      exec:
                        command:
                          - /wait-shutdown
                  args:
                    - /nginx-ingress-controller
                    - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
                    - --election-id=ingress-controller-leader
                    - --ingress-class=nginx
                    - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
                    - --validating-webhook=:8443
                    - --validating-webhook-certificate=/usr/local/certificates/cert
                    - --validating-webhook-key=/usr/local/certificates/key
                  securityContext:
                    capabilities:
                      drop:
                        - ALL
                      add:
                        - NET_BIND_SERVICE
                    runAsUser: 101
                    allowPrivilegeEscalation: true
                  env:
                    - name: POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    - name: LD_PRELOAD
                      value: /usr/local/lib/libmimalloc.so
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 10254
                      scheme: HTTP
                    initialDelaySeconds: 10
                    periodSeconds: 10
                    timeoutSeconds: 1
                    successThreshold: 1
                    failureThreshold: 5
                  readinessProbe:
                    httpGet:
                      path: /healthz
                      port: 10254
                      scheme: HTTP
                    initialDelaySeconds: 10
                    periodSeconds: 10
                    timeoutSeconds: 1
                    successThreshold: 1
                    failureThreshold: 3
                  ports:
                    - name: http
                      containerPort: 80
                      protocol: TCP
                    - name: https
                      containerPort: 443
                      protocol: TCP
                    - name: webhook
                      containerPort: 8443
                      protocol: TCP
                  volumeMounts:
                    - name: webhook-cert
                      mountPath: /usr/local/certificates/
                      readOnly: true
                  resources:
                    requests:
                      cpu: 100m
                      memory: 90Mi
              nodeSelector:
                kubernetes.io/os: linux
              serviceAccountName: ingress-nginx
              terminationGracePeriodSeconds: 300
              volumes:
                - name: webhook-cert
                  secret:
                    secretName: ingress-nginx-admission
        ---
        # Source: ingress-nginx/templates/admission-webhooks/validating-webhook.yaml
        # before changing this value, check the required kubernetes version
        # https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
        apiVersion: admissionregistration.k8s.io/v1
        kind: ValidatingWebhookConfiguration
        metadata:
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: admission-webhook
          name: ingress-nginx-admission
        webhooks:
          - name: validate.nginx.ingress.kubernetes.io
            matchPolicy: Equivalent
            rules:
              - apiGroups:
                  - networking.k8s.io
                apiVersions:
                  - v1beta1
                operations:
                  - CREATE
                  - UPDATE
                resources:
                  - ingresses
            failurePolicy: Fail
            sideEffects: None
            admissionReviewVersions:
              - v1
              - v1beta1
            clientConfig:
              service:
                namespace: ingress-nginx
                name: ingress-nginx-controller-admission
                path: /networking/v1beta1/ingresses
        ---
        # Source: ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: ingress-nginx-admission
          annotations:
            helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
            helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: admission-webhook
          namespace: ingress-nginx
        ---
        # Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: ingress-nginx-admission
          annotations:
            helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
            helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: admission-webhook
        rules:
          - apiGroups:
              - admissionregistration.k8s.io
            resources:
              - validatingwebhookconfigurations
            verbs:
              - get
              - update
        ---
        # Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: ingress-nginx-admission
          annotations:
            helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
            helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: admission-webhook
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: ingress-nginx-admission
        subjects:
          - kind: ServiceAccount
            name: ingress-nginx-admission
            namespace: ingress-nginx
        ---
        # Source: ingress-nginx/templates/admission-webhooks/job-patch/role.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: ingress-nginx-admission
          annotations:
            helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
            helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: admission-webhook
          namespace: ingress-nginx
        rules:
          - apiGroups:
              - ''
            resources:
              - secrets
            verbs:
              - get
              - create
        ---
        # Source: ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: ingress-nginx-admission
          annotations:
            helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
            helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: admission-webhook
          namespace: ingress-nginx
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: ingress-nginx-admission
        subjects:
          - kind: ServiceAccount
            name: ingress-nginx-admission
            namespace: ingress-nginx
        ---
        # Source: ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: ingress-nginx-admission-create
          annotations:
            helm.sh/hook: pre-install,pre-upgrade
            helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: admission-webhook
          namespace: ingress-nginx
        spec:
          template:
            metadata:
              name: ingress-nginx-admission-create
              labels:
                helm.sh/chart: ingress-nginx-3.23.0
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/version: 0.44.0
                app.kubernetes.io/managed-by: Helm
                app.kubernetes.io/component: admission-webhook
            spec:
              containers:
                - name: create
                  image: docker.io/jettech/kube-webhook-certgen:v1.5.1
                  imagePullPolicy: IfNotPresent
                  args:
                    - create
                    - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
                    - --namespace=$(POD_NAMESPACE)
                    - --secret-name=ingress-nginx-admission
                  env:
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
              restartPolicy: OnFailure
              serviceAccountName: ingress-nginx-admission
              securityContext:
                runAsNonRoot: true
                runAsUser: 2000
        ---
        # Source: ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: ingress-nginx-admission-patch
          annotations:
            helm.sh/hook: post-install,post-upgrade
            helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
          labels:
            helm.sh/chart: ingress-nginx-3.23.0
            app.kubernetes.io/name: ingress-nginx
            app.kubernetes.io/instance: ingress-nginx
            app.kubernetes.io/version: 0.44.0
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/component: admission-webhook
          namespace: ingress-nginx
        spec:
          template:
            metadata:
              name: ingress-nginx-admission-patch
              labels:
                helm.sh/chart: ingress-nginx-3.23.0
                app.kubernetes.io/name: ingress-nginx
                app.kubernetes.io/instance: ingress-nginx
                app.kubernetes.io/version: 0.44.0
                app.kubernetes.io/managed-by: Helm
                app.kubernetes.io/component: admission-webhook
            spec:
              containers:
                - name: patch
                  image: docker.io/jettech/kube-webhook-certgen:v1.5.1
                  imagePullPolicy: IfNotPresent
                  args:
                    - patch
                    - --webhook-name=ingress-nginx-admission
                    - --namespace=$(POD_NAMESPACE)
                    - --patch-mutating=false
                    - --secret-name=ingress-nginx-admission
                    - --patch-failure-policy=Fail
                  env:
                    - name: POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
              restartPolicy: OnFailure
              serviceAccountName: ingress-nginx-admission
              securityContext:
                runAsNonRoot: true
                runAsUser: 2000
    DependsOn: "KubeManifestRedisSpinnaker"
  KubeManifestURLMYSQL:
    Type: "AWSQS::Kubernetes::Resource"
    Properties:
      ClusterName: !Ref KubeClusterName
      Namespace: "spinnaker"
      # Kubernetes manifest URL
      Url: https://raw.githubusercontent.com/mcgonagle/dryrun/main/mysql.yml
    DependsOn: "KubeManifestNGINXIngress"
